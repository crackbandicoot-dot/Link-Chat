import os
import sys
import threading
import time
from typing import Optional, List, Dict
from utils.helpers import log_message, get_network_interfaces, format_file_size
from utils.constants import *
from core.raw_socket import RawSocketManager
from networking.discovery import DeviceDiscovery
from networking.messaging import MessageManager
from networking.file_transfer import FileTransferManager


class ConsoleInterface:
    """
    Interfaz de consola principal para Link-Chat
    """
    
    def __init__(self):
        """Inicializa la interfaz de consola"""
        self.socket_manager = None
        self.device_discovery = None
        self.message_manager = None
        self.file_manager = None
        self.is_running = False
        self.input_thread = None
        self.discovered_devices = {}
        
    def start(self) -> None:
        """Inicia la interfaz de consola"""
        self.show_welcome()
        
        # Seleccionar interfaz de red
        interface = self.select_network_interface()
        if not interface:
            print("‚ùå No se pudo seleccionar una interfaz de red.")
            return
        
        # Inicializar componentes
        if not self.initialize_components(interface):
            print("‚ùå Error inicializando componentes de red.")
            return
        
        # Mostrar men√∫ principal
        self.main_menu()
    
    def show_welcome(self) -> None:
        """Muestra la pantalla de bienvenida"""
        os.system('cls' if os.name == 'nt' else 'clear')
        print("‚ïî" + "="*48 + "‚ïó")
        print("‚ïë          LINK-CHAT             ‚ïë")
        print("‚ïë      Mensajer√≠a y Transferencia de Archivos ‚ïë")
        print("‚ïö" + "="*48 + "‚ïù")
        print()
        print("üöÄ Iniciando Link-Chat...")
        print("‚ö†Ô∏è  Nota: Esta aplicaci√≥n requiere permisos de administrador")
        print()
    
    def select_network_interface(self) -> Optional[str]:
        """
        Permite al usuario seleccionar una interfaz de red
        
        Returns:
            Optional[str]: Nombre de la interfaz seleccionada
        """
        interfaces = get_network_interfaces()
        
        if not interfaces:
            print("‚ùå No se encontraron interfaces de red disponibles.")
            return None
        
        print("üîå Interfaces de red disponibles:")
        print()
        
        for i, interface in enumerate(interfaces, 1):
            print(f"  {i}. {interface}")
        
        print()
        
        while True:
            try:
                choice = input(f"Seleccione una interfaz (1-{len(interfaces)}) [1]: ").strip()
                
                if not choice:
                    choice = "1"
                
                index = int(choice) - 1
                
                if 0 <= index < len(interfaces):
                    selected = interfaces[index]
                    print(f"‚úÖ Interfaz seleccionada: {selected}")
                    return selected
                else:
                    print(f"‚ùå Opci√≥n inv√°lida. Seleccione entre 1 y {len(interfaces)}")
                    
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero v√°lido.")
            except KeyboardInterrupt:
                print("\nüëã Saliendo...")
                sys.exit(0)
    
    def initialize_components(self, interface: str) -> bool:
        """
        Inicializa todos los componentes de red
        
        Args:
            interface: Interfaz de red a usar
            
        Returns:
            bool: True si se inicializ√≥ correctamente
        """
        try:
            print(f"\nüîß Inicializando componentes en {interface}...")
            
            # Inicializar socket manager
            self.socket_manager = RawSocketManager(interface)
            if not self.socket_manager.start():
                return False
            
            # Inicializar descubrimiento de dispositivos
            self.device_discovery = DeviceDiscovery(self.socket_manager)
            self.device_discovery.start()
            
            # Registrar callback para dispositivos descubiertos
            self.device_discovery.register_callback(
                "console_update", 
                self._on_device_discovered
            )
            
            # Inicializar gestor de mensajes
            self.message_manager = MessageManager(self.socket_manager)
            self.message_manager.start()
            
            # Registrar callback para mensajes recibidos
            self.message_manager.register_callback(
                "console_display",
                self._on_message_received
            )
            
            # Inicializar gestor de archivos
            self.file_manager = FileTransferManager(self.socket_manager)
            self.file_manager.start()
            
            # Registrar callbacks para transferencia de archivos
            self.file_manager.register_callback(
                "console_progress",
                self._on_file_progress
            )
            
            self.is_running = True
            
            print("‚úÖ Componentes inicializados correctamente")
            print(f"üì° MAC local: {self.socket_manager.local_mac}")
            print()
            
            # Iniciar descubrimiento autom√°tico
            self.device_discovery.start_discovery()
            
            return True
            
        except Exception as e:
            log_message("ERROR", f"Error inicializando componentes: {e}")
            return False
    
    def main_menu(self) -> None:
        """Muestra y maneja el men√∫ principal"""
        while self.is_running:
            try:
                self.show_main_menu()
                choice = input("\nSeleccione una opci√≥n: ").strip()
                
                if choice == "1":
                    self.messaging_menu()
                elif choice == "2":
                    self.file_transfer_menu()
                elif choice == "3":
                    self.show_discovered_devices()
                elif choice == "4":
                    self.show_network_info()
                elif choice == "5":
                    self.settings_menu()
                elif choice == "0":
                    self.shutdown()
                    break
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intente de nuevo.")
                    time.sleep(1)
                    
            except KeyboardInterrupt:
                print("\nüëã Saliendo...")
                self.shutdown()
                break
            except Exception as e:
                log_message("ERROR", f"Error en men√∫ principal: {e}")
                time.sleep(2)
    
    def show_main_menu(self) -> None:
        """Muestra el men√∫ principal"""
        os.system('cls' if os.name == 'nt' else 'clear')
        
        print("‚ïî" + "="*50 + "‚ïó")
        print("‚ïë                LINK-CHAT MEN√ö                 ‚ïë")
        print("‚ï†" + "="*50 + "‚ï£")
        print("‚ïë  1. üí¨ Mensajer√≠a                            ‚ïë")
        print("‚ïë  2. üìÅ Transferencia de Archivos             ‚ïë")
        print("‚ïë  3. üîç Dispositivos Descubiertos             ‚ïë")
        print("‚ïë  4. üåê Informaci√≥n de Red                    ‚ïë")
        print("‚ïë  5. ‚öôÔ∏è  Configuraci√≥n                        ‚ïë")
        print("‚ïë  0. üö™ Salir                                 ‚ïë")
        print("‚ïö" + "="*50 + "‚ïù")
        
        # Mostrar estado
        device_count = len(self.discovered_devices)
        print(f"\nüìä Estado: {device_count} dispositivos descubiertos")
        
        if self.socket_manager and self.socket_manager.local_mac:
            print(f"üì° MAC local: {self.socket_manager.local_mac}")
    
    def messaging_menu(self) -> None:
        """Men√∫ de mensajer√≠a"""
        while True:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("‚ïî" + "="*40 + "‚ïó")
            print("‚ïë           MENSAJER√çA                 ‚ïë")
            print("‚ïö" + "="*40 + "‚ïù")
            print()
            
            print("1. üì§ Enviar mensaje a dispositivo")
            print("2. üì¢ Enviar mensaje broadcast")
            print("3. üì• Ver mensajes recibidos")
            print("0. ‚¨ÖÔ∏è  Volver al men√∫ principal")
            print()
            
            choice = input("Seleccione una opci√≥n: ").strip()
            
            if choice == "1":
                self.send_message_to_device()
            elif choice == "2":
                self.send_broadcast_message()
            elif choice == "3":
                self.show_received_messages()
            elif choice == "0":
                break
            else:
                print("‚ùå Opci√≥n inv√°lida")
                time.sleep(1)
    
    def file_transfer_menu(self) -> None:
        """Men√∫ de transferencia de archivos"""
        while True:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("‚ïî" + "="*45 + "‚ïó")
            print("‚ïë         TRANSFERENCIA DE ARCHIVOS        ‚ïë")
            print("‚ïö" + "="*45 + "‚ïù")
            print()
            
            print("1. üì§ Enviar archivo")
            print("2. üì• Ver transferencias en progreso")
            print("3. üìã Historial de transferencias")
            print("0. ‚¨ÖÔ∏è  Volver al men√∫ principal")
            print()
            
            choice = input("Seleccione una opci√≥n: ").strip()
            
            if choice == "1":
                self.send_file()
            elif choice == "2":
                self.show_transfer_progress()
            elif choice == "3":
                self.show_transfer_history()
            elif choice == "0":
                break
            else:
                print("‚ùå Opci√≥n inv√°lida")
                time.sleep(1)
    
    def show_discovered_devices(self) -> None:
        """Muestra los dispositivos descubiertos"""
        os.system('cls' if os.name == 'nt' else 'clear')
        print("‚ïî" + "="*50 + "‚ïó")
        print("‚ïë           DISPOSITIVOS DESCUBIERTOS           ‚ïë")
        print("‚ïö" + "="*50 + "‚ïù")
        print()
        
        if not self.discovered_devices:
            print("üîç No se han descubierto dispositivos a√∫n...")
            print("   El descubrimiento autom√°tico est√° en progreso.")
        else:
            print(f"üì± {len(self.discovered_devices)} dispositivos encontrados:")
            print()
            
            for i, (mac, info) in enumerate(self.discovered_devices.items(), 1):
                status = "üü¢ Activo" if info.get('active', False) else "üî¥ Inactivo"
                last_seen = info.get('last_seen', 'Desconocido')
                print(f"  {i}. MAC: {mac}")
                print(f"     Estado: {status}")
                print(f"     √öltima vez visto: {last_seen}")
                print()
        
        input("\nPresione Enter para continuar...")
    
    def show_network_info(self) -> None:
        """Muestra informaci√≥n de la red"""
        os.system('cls' if os.name == 'nt' else 'clear')
        print("‚ïî" + "="*45 + "‚ïó")
        print("‚ïë          INFORMACI√ìN DE RED              ‚ïë")
        print("‚ïö" + "="*45 + "‚ïù")
        print()
        
        if self.socket_manager:
            print(f"üîå Interfaz: {self.socket_manager.interface}")
            print(f"üì° MAC local: {self.socket_manager.local_mac}")
            print(f"üåê Protocolo: Link-Chat v{PROTOCOL_VERSION}")
            print(f"üî¢ EtherType: 0x{ETHERTYPE_LINKCHAT:04X}")
        
        print()
        print("üìä Estad√≠sticas:")
        # Aqu√≠ se pueden agregar estad√≠sticas de red
        print("   - Mensajes enviados: N/A")
        print("   - Mensajes recibidos: N/A")
        print("   - Archivos transferidos: N/A")
        
        input("\nPresione Enter para continuar...")
    
    def settings_menu(self) -> None:
        """Men√∫ de configuraci√≥n"""
        print("‚öôÔ∏è Configuraci√≥n - En desarrollo...")
        time.sleep(2)
    
    def send_message_to_device(self) -> None:
        """Env√≠a un mensaje a un dispositivo espec√≠fico"""
        if not self.discovered_devices:
            print("‚ùå No hay dispositivos descubiertos para enviar mensajes.")
            input("Presione Enter para continuar...")
            return
        
        # Mostrar dispositivos disponibles
        print("üì± Dispositivos disponibles:")
        devices = list(self.discovered_devices.keys())
        
        for i, mac in enumerate(devices, 1):
            info = self.discovered_devices[mac]
            status = "üü¢" if info.get('active', False) else "üî¥"
            print(f"  {i}. {mac} {status}")
        
        try:
            choice = int(input(f"\nSeleccione dispositivo (1-{len(devices)}): ")) - 1
            if 0 <= choice < len(devices):
                target_mac = devices[choice]
                message = input("Ingrese el mensaje: ")
                
                if message.strip():
                    # Enviar mensaje usando MessageManager
                    success = self.message_manager.send_message(target_mac, message)
                    if success:
                        print("‚úÖ Mensaje enviado correctamente")
                    else:
                        print("‚ùå Error enviando mensaje")
                else:
                    print("‚ùå Mensaje vac√≠o")
            else:
                print("‚ùå Selecci√≥n inv√°lida")
                
        except ValueError:
            print("‚ùå Ingrese un n√∫mero v√°lido")
        except Exception as e:
            print(f"‚ùå Error: {e}")
        
        input("Presione Enter para continuar...")
    
    def send_broadcast_message(self) -> None:
        """Env√≠a un mensaje broadcast a todos los dispositivos"""
        message = input("Ingrese el mensaje broadcast: ")
        
        if message.strip():
            success = self.message_manager.send_broadcast_message(message)
            if success:
                print("‚úÖ Mensaje broadcast enviado")
            else:
                print("‚ùå Error enviando mensaje broadcast")
        else:
            print("‚ùå Mensaje vac√≠o")
        
        input("Presione Enter para continuar...")
    
    def send_file(self) -> None:
        """Env√≠a un archivo a un dispositivo"""
        if not self.discovered_devices:
            print("‚ùå No hay dispositivos descubiertos.")
            input("Presione Enter para continuar...")
            return
        
        # Seleccionar archivo
        filepath = input("Ingrese la ruta del archivo: ").strip().strip('"')
        
        if not os.path.exists(filepath):
            print("‚ùå El archivo no existe")
            input("Presione Enter para continuar...")
            return
        
        if not os.path.isfile(filepath):
            print("‚ùå La ruta no es un archivo v√°lido")
            input("Presione Enter para continuar...")
            return
        
        # Mostrar informaci√≥n del archivo
        file_size = os.path.getsize(filepath)
        print(f"üìÅ Archivo: {os.path.basename(filepath)}")
        print(f"üìè Tama√±o: {format_file_size(file_size)}")
        
        # Seleccionar dispositivo destino
        print("\nüì± Dispositivos disponibles:")
        devices = list(self.discovered_devices.keys())
        
        for i, mac in enumerate(devices, 1):
            info = self.discovered_devices[mac]
            status = "üü¢" if info.get('active', False) else "üî¥"
            print(f"  {i}. {mac} {status}")
        
        try:
            choice = int(input(f"\nSeleccione dispositivo (1-{len(devices)}): ")) - 1
            if 0 <= choice < len(devices):
                target_mac = devices[choice]
                
                print(f"\nüì§ Iniciando transferencia a {target_mac}...")
                success = self.file_manager.send_file(target_mac, filepath)
                
                if success:
                    print("‚úÖ Transferencia iniciada")
                else:
                    print("‚ùå Error iniciando transferencia")
            else:
                print("‚ùå Selecci√≥n inv√°lida")
                
        except ValueError:
            print("‚ùå Ingrese un n√∫mero v√°lido")
        except Exception as e:
            print(f"‚ùå Error: {e}")
        
        input("Presione Enter para continuar...")
    
    def show_received_messages(self) -> None:
        """Muestra los mensajes recibidos"""
        print("üì• Mensajes recibidos - En desarrollo...")
        time.sleep(2)
    
    def show_transfer_progress(self) -> None:
        """Muestra el progreso de transferencias"""
        print("üìä Progreso de transferencias - En desarrollo...")
        time.sleep(2)
    
    def show_transfer_history(self) -> None:
        """Muestra el historial de transferencias"""
        print("üìã Historial de transferencias - En desarrollo...")
        time.sleep(2)
    
    def _on_device_discovered(self, mac: str, info: Dict) -> None:
        """
        Callback llamado cuando se descubre un nuevo dispositivo
        
        Args:
            mac: Direcci√≥n MAC del dispositivo
            info: Informaci√≥n del dispositivo
        """
        self.discovered_devices[mac] = info
        # No imprimir aqu√≠ para evitar interferir con la interfaz
    
    def _on_message_received(self, sender_mac: str, message: str) -> None:
        """
        Callback llamado cuando se recibe un mensaje
        
        Args:
            sender_mac: MAC del remitente
            message: Contenido del mensaje
        """
        # En una implementaci√≥n completa, esto se mostrar√≠a en una ventana separada
        # o se guardar√≠a para mostrar en el men√∫ de mensajes
        pass
    
    def _on_file_progress(self, transfer_id: str, progress: Dict) -> None:
        """
        Callback llamado para reportar progreso de transferencia
        
        Args:
            transfer_id: ID de la transferencia
            progress: Informaci√≥n de progreso
        """
        # Actualizar progreso de transferencias
        pass
    
    def shutdown(self) -> None:
        """Cierra la aplicaci√≥n limpiamente"""
        print("\nüõë Cerrando Link-Chat...")
        
        self.is_running = False
        
        # Detener componentes
        if self.device_discovery:
            self.device_discovery.stop()
        
        if self.message_manager:
            self.message_manager.stop()
        
        if self.file_manager:
            self.file_manager.stop()
        
        if self.socket_manager:
            self.socket_manager.stop()
        
        print("‚úÖ Link-Chat cerrado correctamente")
